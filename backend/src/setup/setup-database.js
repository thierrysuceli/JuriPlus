const path = require('path');

// Fun√ß√£o para configurar e inicializar o banco
async function setupDatabase() {
  try {
    console.log('üîÑ Iniciando configura√ß√£o do banco de dados...\n');

    // Detectar qual banco usar
    let dbModule;
    let dbType;

    // Tentar SQLite primeiro
    try {
      require('sqlite3');
      dbModule = require('../config/database-sqlite');
      dbType = 'SQLite';
      console.log('üì¶ SQLite detectado - configurando banco local...');
      
      // Inicializar banco SQLite com schema
      await dbModule.initializeDatabase();
      
    } catch (sqliteError) {
      console.log('‚ö†Ô∏è  SQLite n√£o dispon√≠vel, tentando PostgreSQL...');
      
      // Fallback para PostgreSQL
      try {
        require('pg');
        dbModule = require('../config/database');
        dbType = 'PostgreSQL';
        console.log('üêò PostgreSQL detectado - configurando banco...');
        
        // Testar conex√£o PostgreSQL
        await dbModule.testConnection();
        console.log('‚úÖ PostgreSQL configurado com sucesso');
        
      } catch (pgError) {
        throw new Error(`‚ùå Nenhum banco dispon√≠vel.\nSQLite: ${sqliteError.message}\nPostgreSQL: ${pgError.message}`);
      }
    }

    // Testar conex√£o final
    await dbModule.testConnection();
    
    console.log(`\n‚úÖ Banco ${dbType} configurado e pronto para uso!`);
    console.log(`üìç Localiza√ß√£o: ${dbType === 'SQLite' ? 'Local (arquivo)' : 'Servidor PostgreSQL'}`);
    
    // Fechar conex√£o
    if (dbModule.closePool) {
      await dbModule.closePool();
    }
    
    return { type: dbType, success: true };
    
  } catch (error) {
    console.error('\n‚ùå Erro na configura√ß√£o do banco:', error.message);
    
    console.log('\nüîß Solu√ß√µes sugeridas:');
    console.log('1. Para desenvolvimento local (recomendado):');
    console.log('   npm install sqlite3');
    console.log('   npm run setup');
    console.log('');
    console.log('2. Para PostgreSQL:');
    console.log('   - Instale e inicie o PostgreSQL');
    console.log('   - Configure as vari√°veis de ambiente (DB_*)');
    console.log('   - Execute: npm run setup');
    
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupDatabase();
}

module.exports = { setupDatabase };
